#!/usr/bin/env bash

# Exit on error and trace errors
set -eo pipefail

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Enhanced logging functions
info() { echo -e "${CYAN}[â„¹] $1${NC}"; }
success() { echo -e "${GREEN}[âœ“] $1${NC}"; }
warning() { echo -e "${YELLOW}[âš ] $1${NC}"; }
error() { echo -e "${RED}[âœ—] $1${NC}" >&2; }

# Package categories
declare -A PACKAGE_CATEGORIES=(
    ["IDE"]="vscodium obsidian"
    ["Communication"]="vesktop telegram-desktop"
    ["Gaming"]="xmcl-electron-bin cachyos-gaming-meta cachyos-gaming-applications"
    ["Utilities"]="ranger youtube-dl-git mpv-mpris yt-dlp fzf mediainfo fastfetch"
    ["System"]="power-profiles-daemon asusctl supergfxctl rog-control-center"
)

# Services to enable & start
SERVICES=(
    "supergfxd"
    "power-profiles-daemon"
    "asusd"
)

# Check and install dependencies
check_dependencies() {
    local missing=()
    
    # Check for yay
    if ! command -v yay &>/dev/null; then
        warning "yay not found - installing now..."
        sudo pacman -S --needed --noconfirm git base-devel
        git clone https://aur.archlinux.org/yay-bin.git /tmp/yay-bin
        (cd /tmp/yay-bin && makepkg -si --noconfirm)
        success "yay installed successfully"
    fi

    # Check for pacman
    if ! command -v pacman &>/dev/null; then
        error "pacman is required but not installed"
        exit 1
    fi
}

# BlackArch integration for CyberSec tools
blackarch() {
    curl -O https://blackarch.org/strap.sh
    chmod +x ./strap.sh
    sudo ./strap.sh
}

# Install packages with comprehensive error handling
install_packages() {
    local all_packages=()
    local failed_packages=()
    local installed_count=0
    local skipped_count=0

    # Combine all packages
    for category in "${!PACKAGE_CATEGORIES[@]}"; do
        all_packages+=(${PACKAGE_CATEGORIES[$category]})
    done

    info "Updating package databases..."
    sudo pacman -Sy --noconfirm || {
        error "Failed to update package databases"
        exit 1
    }

    # Install each package
    for pkg in "${all_packages[@]}"; do
        # Skip empty elements
        [[ -z "$pkg" ]] && continue
        
        local category_name=""
        for category in "${!PACKAGE_CATEGORIES[@]}"; do
            if [[ " ${PACKAGE_CATEGORIES[$category]} " =~ " $pkg " ]]; then
                category_name=$category
                break
            fi
        done

        printf "\n${BLUE}â–¸ ${NC}Installing ${CYAN}%-25s${NC} [${YELLOW}%s${NC}]" "$pkg" "${category_name:-Unknown}"
        
        # Check if installed
        if pacman -Qi "$pkg" &>/dev/null; then
            echo -e " ${GREEN}âœ” Already installed${NC}"
            ((skipped_count++))
            continue
        fi

        # Install from official repos or AUR
        if pacman -Si "$pkg" &>/dev/null; then
            sudo pacman -S --noconfirm "$pkg" &>/dev/null && {
                echo -e " ${GREEN}âœ” Installed from official repos${NC}"
                ((installed_count++))
            } || {
                echo -e " ${RED}âœ– Installation failed${NC}"
                failed_packages+=("$pkg (official)")
                continue
            }
        else
            yay -S --noconfirm --needed --cleanafter "$pkg" &>/dev/null && {
                echo -e " ${GREEN}âœ” Installed from AUR${NC}"
                ((installed_count++))
            } || {
                echo -e " ${RED}âœ– AUR installation failed${NC}"
                failed_packages+=("$pkg (AUR)")
            }
        fi
    done

    # Summary
    echo -e "\n${CYAN}Installation Summary:${NC}"
    echo -e "â€¢ ${GREEN}Installed: $installed_count packages${NC}"
    echo -e "â€¢ ${YELLOW}Skipped: $skipped_count already installed${NC}"
    
    if [ ${#failed_packages[@]} -gt 0 ]; then
        echo -e "â€¢ ${RED}Failed: ${#failed_packages[@]} packages${NC}"
        for failed in "${failed_packages[@]}"; do
            echo -e "  - $failed"
        done
    fi
    
    return ${#failed_packages[@]}
}

# Enable and start services with status tracking
function activate_services() {
    local enabled_count=0
    local failed_services=()
    
    # Reload systemd to detect new services
    sudo systemctl daemon-reload

    for svc in "${SERVICES[@]}"; do
        printf "\n${BLUE}â–¸ ${NC}Configuring service: ${CYAN}%-25s${NC}" "$svc"
        
        # Check if service file exists rather than unit status
        if [[ ! -f "/usr/lib/systemd/system/${svc}.service" ]]; then
            echo -e " ${RED}âœ– Service file not found${NC}"
            failed_services+=("$svc (file missing)")
            continue
        fi
        
        # Enable service
        if sudo systemctl enable "$svc" &>/dev/null; then
            echo -ne " ${GREEN}âœ” Enabled${NC}"
        else
            echo -ne " ${RED}âœ– Enable failed${NC}"
            failed_services+=("$svc (enable failed)")
            continue
        fi
        
        # Start service
        if sudo systemctl start "$svc" &>/dev/null; then
            echo -e " ${GREEN}âœ“ Started${NC}"
            ((enabled_count++))
        else
            echo -e " ${RED}âœ– Start failed${NC}"
            failed_services+=("$svc (start failed)")
        fi
    done

    # Summary
    echo -e "\n${CYAN}Services Summary:${NC}"
    echo -e "â€¢ ${GREEN}Activated: $enabled_count services${NC}"
    
    if [ ${#failed_services[@]} -gt 0 ]; then
        echo -e "â€¢ ${RED}Failed: ${#failed_services[@]} services${NC}"
        for failed in "${failed_services[@]}"; do
            echo -e "  - $failed"
        done
    fi
    
    return ${#failed_services[@]}
}

function verify_services() {
    echo -e "\n${CYAN}Verifying Services:${NC}"
    for svc in "${SERVICES[@]}"; do
        if systemctl is-active --quiet "$svc"; then
            echo -e "${GREEN}âœ“ $svc is running${NC}"
        else
            echo -e "${YELLOW}âš  $svc is not running${NC}"
        fi
    done
}

# Main execution flow
main() {
    echo -e "\n${YELLOW}ðŸ“¦ Starting Package Installation Process${NC}"
    echo -e "--------------------------------------------"
    
    # Check and install dependencies
    info "Checking system dependencies..."
    check_dependencies
    blackarch
    
    # Install packages
    info "Installing packages..."
    if ! install_packages; then
        warning "Some packages failed to install"
    fi
    
    # Activate services
    info "Configuring system services..."
    if ! activate_services; then
        warning "Some services failed to activate"
    fi
    
    # Verify Services
    info "Verifying Services..."
    if ! verify_services; then
        warning "Failed to Verify"
    fi

    # Final success message
    echo -e "\n${GREEN}âœ… Package Installation Complete!${NC}"
}

# Execute main function
main
